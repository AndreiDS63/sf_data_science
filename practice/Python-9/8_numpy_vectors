import numpy as np

def vectors():
    vec1 = np.array([2, 4, 7, 2.5])
    vec2 = np.array([12, 6, 3.6, 13])
    print('vec1 + vec2')
    print(vec1 + vec2)
    print()
    # [14.  10.  10.6 15.5]
    
    # если бы это были списки, то поэлементно
    # можно было бы сложить через zip
    print('list1 + list2')
    list1 = [2, 4, 7, 2.5]
    list2 = [12, 6, 3.6, 13]
    print([x + y for x, y in zip(list1, list2)])
    print()
    
    # вектора должны быть одинаковой длины
    print('vec1 * vec2')
    print(vec1 * vec2)
    # [24.  24.  25.2 32.5]
    print()
    
    # если один вектор будет на один элемент короче
    vec1 = np.array([2, 4, 7, 2.5])
    vec2 = np.array([12, 6, 3.6])
    # print('vec1 * vec2')
    # print(vec1 * vec2)
    # ValueError: operands could not be broadcast together with shapes (4,) (3,)
    print()
    
    # исключение - если операция между вектором и одним числом
    vec = np.arange(5)
    print('vec')
    print(vec)
    # [0 1 2 3 4]
    print('vec * 10')
    print(vec * 10)
    # [ 0 10 20 30 40]
    print('vec**2')
    print(vec**2)
    # [ 0  1  4  9 16]
    print()
    
    # поэлементное сравнение векторов
    vec1 = np.array([2, 4, 7, 2.5])
    vec2 = np.array([12, 6, 3.6, 13])
    print('vec1 > vec2')
    print(vec1 > vec2)
    # [False False  True False]
    print()
    
    # сравнение вектора с числом
    vec = np.array([14,15,9,26,53,5,89])
    print('vec <= 26')
    print(vec <= 26)
    # [ True  True  True  True False  True False]
    print()
# vectors()


def vectors_adv():
    # длина вектора
    vec = np.array([3, 4])
    lenght = np.sqrt(np.sum(vec**2))
    print('lenght')
    print(lenght)
    # 5.0
    print()
    
    #с модулем linalg
    lenght = np.linalg.norm(vec)
    print('lenght linalg.norm')
    print(lenght)
    # 5.0
    print()
    
    
    # расстояние между двумя векторами
    vec1 = np.array([0, 3, 5])
    vec2 = np.array([12, 4, 7])
    distance = np.sqrt(np.sum((vec1 - vec2)**2))
    print('distance')
    print(distance)
    # 12.206555615733702
    print()
    
    # с модулем linalg
    vec1 = np.array([0, 3, 5])
    vec2 = np.array([12, 4, 7])
    distance = np.linalg.norm(vec1 - vec2)
    print('distance')
    print(distance)
    # 12.206555615733702
    print()
    
    
    # скалярное произведение
    vec1 = np.arange(1, 6)
    vec2 = np.linspace(10, 20, 5)
    scalar_product = np.sum(vec1 * vec2)
    print('scalar_product')
    print(scalar_product)
    # 250.0
    print()
    
    # проще
    scalar_product = np.dot(vec1, vec2)
    print('scalar_product')
    print(scalar_product)
    # 250.0
    print()
    
    # если скалярное произведение равно 0 - то вектора перпендикулярны
    x = np.array([25, 0])
    y = np.array([0, 10])
    print('np.dot(x, y)')
    print(np.dot(x, y))
# vectors_adv()

def some_func(*args):
    # inp = ['a', 'b', 'c', 'd']
    lst = []
    for i in range(len(args)):
        for j in range(i+1, len(args)):
            print(args[i], args[j])
# some_func('a', 'b', 'c', 'd', 'e')

def task_8_4():
    a = np.array([23, 34, 27])
    b = np.array([-54, 1,  46])
    c = np.array([46, 68, 54])

    def are_vect_codirect(*args):
        letters = ['a', 'b', 'c', 'd', 'e']    
        for i in range(len(args)):
            for j in range(i+1, len(args)):
                print(letters[i], letters[j])
                print(args[i], args[j])
                len1 = np.linalg.norm(args[i])
                len2 = np.linalg.norm(args[j])
                sum_len = len1 + len2
                sum_vect = args[i] + args[j]
                len_sum_vect = np.linalg.norm(sum_vect)
                print(True if sum_len == len_sum_vect else False)
    are_vect_codirect(a, b, c)
# task_8_4()

def statist_vectors():
    vec = np.array([2,7,18,28,18,1,8,4])
    print('vec.min()')
    print(vec.min())
    # 1
    print()
    
    print('vec.max()')
    print(vec.max())
    # 28
    print()
    
    # ср знач
    print('vec.mean()')
    print(vec.mean())
    # 10.75
    print()
    
    
statist_vectors()
                    
        